#!/bin/sh

# Popcorn Linux sync
# Antonio Barbalace, Stevens 2019
# To be used when no distributed file system is available

# basic checks
if [ ! -f Makefile ] ; then echo "Error: Makefile doesn't exist" ; exit 1 ; fi
if [ -z "`cat /proc/popcorn_peers`" ] ; then echo "Error: connect to another Popcorn machine first" ; exit 1 ; fi

# parse the Makefile for the name of the program
EXEC_NAME=`cat Makefile | awk '/^[ \t]*BIN[ \t]+:=[ \t]+[a-zA-Z_\-]+/{print $0}' | sed 's/BIN//' | sed 's/:=//' | sed 's/ //g'`
if [ -z "$EXEC_NAME" ] ; then echo "Error: malformed Popcorn Makefile" ; exit 1 ; fi

# identify Popcorn machines addresses (TCP/IP only)
MYSELF=`cat /proc/popcorn_peers | awk '/^*[ \t]+[0-9]+[ \t]+[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+[ \t]+/{print $3}'`
if [ -z "$MYSELF" ] ; then echo "Error: malformed /proc/popcorn_peers" ; exit 1 ; fi

ALL=`cat /proc/popcorn_peers | sed 's/*/ /' | awk '/^[ \t]+[0-9]+[ \t]+[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+[ \t]+/{print $2}'`
if [ -z "$ALL" ] ; then echo "Error: malformed /proc/popcorn_peers (all)" ; exit 1 ; fi

#TODO following code to be extended to multiple architectures
for CURRENT in $ALL ; do
  if [ "$CURRENT" = "$MYSELF" ] ; then continue ; fi

  # copy files
  scp ${EXEC_NAME}_aarch64 ${EXEC_NAME}_x86-64 ${USER}@${CURRENT}:`pwd`/

  # create symbolic link and list file
  FILELIST=$(ssh ${USER}@${CURRENT} "cd `pwd` ; FULLPATH=\`which ssh\` ; if [ ! -z \"\`file \${FULLPATH} | grep aarch64\`\" ] ; then ARCH=\"_aarch64\" ; else ARCH=\"_x86-64\" ; fi ; cp ${EXEC_NAME}\${ARCH} ${EXEC_NAME} ; ls -l")

  # checking if everything was copied succesfully (TODO check sizes)
  if [ -z "echo $FILELIST | grep ${EXEC_NAME}\$" ] ; then echo "Error: cannot find ${EXEC_NAME} on remote ${CURRENT}" ; exit 1 ; fi
  if [ -z "echo $FILELIST | grep ${EXEC_NAME}_aarch64\$" ] ; then echo "Error: cannot find ${EXEC_NAME}_aarch64 on remote ${CURRENT}" ; exit 1 ; fi
  if [ -z "echo $FILELIST | grep ${EXEC_NAME}_x86-64\$" ] ; then echo "Error: cannot find ${EXEC_NAME}_x86-64 on remote ${CURRENT}" ; exit 1 ; fi
done
